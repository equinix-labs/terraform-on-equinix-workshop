{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#about-equinix-labs","title":"About Equinix Labs","text":"<p>Equinix Labs offers workshops, proof of concepts, and tools for exploring and bootstrapping Equinix digital infrastructure including Fabric, Metal, and Network Edge.</p>"},{"location":"#about-the-workshop","title":"About the workshop","text":"<p>In this workshop you will learn how to use Terraform, one of the most popular infrastructure as code (IaC) tools, to deploy and manage infrastructure on Equinix Metal.</p> <p>The goals of this workshop are:</p> <ul> <li>Become familiar with the Equinix Metal console and tools</li> <li>Provision the infrastructure using Terraform</li> <li>Start and test out a sample application</li> </ul>"},{"location":"#workshop-agenda","title":"Workshop agenda","text":"<p>This workshop is split into four parts:</p> Part Title Duration 1 Setup 5 minutes 2 Provisioning 15 minutes 3 Application 7 minutes 4 Conclusion 3 minutes"},{"location":"parts/apply-plan/","title":"Part 3: Apply a Terraform Plan","text":""},{"location":"parts/apply-plan/#steps","title":"Steps","text":""},{"location":"parts/apply-plan/#1-initialize-your-terraform-project","title":"1. Initialize your Terraform project","text":"<p>Running the <code>terraform init</code> command initializes a working directory containing Terraform configuration files.</p> Bash<pre><code>terraform init\n</code></pre> <p>Expected output:</p> Bash<pre><code>$ terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Finding latest version of equinix/equinix...\n- Finding latest version of hashicorp/tls...\n- Finding latest version of hashicorp/local...\n- Installing hashicorp/local v2.4.0...\n- Installed hashicorp/local v2.4.0 (signed by HashiCorp)\n- Installing equinix/equinix v1.13.0...\n- Installed equinix/equinix v1.13.0 (signed by a HashiCorp partner, key ID 1A65631C7288685E)\n- Installing hashicorp/tls v4.0.4...\n- Installed hashicorp/tls v4.0.4 (signed by HashiCorp)\n\nPartner and community providers are signed by their developers.\nIf you'd like to know more about provider signing, you can read about it here:\nhttps://www.terraform.io/docs/cli/plugins/signing.html\n\nTerraform has created a lock file .terraform.lock.hcl to record the provider\nselections it made above. Include this file in your version control repository\nso that Terraform can guarantee to make the same selections by default when\nyou run \"terraform init\" in the future.\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n</code></pre>"},{"location":"parts/apply-plan/#1-create-a-terraform-plan","title":"1. Create a Terraform plan","text":"<p>The <code>terraform plan</code> command creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure.</p> Bash<pre><code>terraform plan\n</code></pre> <p>Expected output:</p> <p></p>"},{"location":"parts/apply-plan/#2-terraform-apply","title":"2. Terraform apply","text":"<p>The <code>terraform apply</code> command executes the actions proposed in a Terraform plan.</p> Bash<pre><code>terraform apply\n</code></pre> <p>Enter <code>yes</code> when prompted for input.</p> <p>Expected output:</p> <p></p>"},{"location":"parts/apply-plan/#3-verify-the-server-was-provisioned","title":"3. Verify the server was provisioned","text":"<p>Take the <code>project_id</code> from the terraform apply and use <code>metal</code> CLI to check the status of the new server</p> Bash<pre><code>export METAL_PROJECT_ID=$(terraform output --raw project_id)\nmetal devices get\n</code></pre> <p>Expected output:</p> Bash<pre><code>$ export METAL_PROJECT_ID=$(terraform output --raw project_id)\n$ metal devices get\n+--------------------------------------+-----------+------------------+--------+----------------------+\n|                  ID                  | HOSTNAME  |        OS        | STATE  |       CREATED        |\n+--------------------------------------+-----------+------------------+--------+----------------------+\n| 6d98ffce-2dbf-4c6c-a96a-61e4d0b15b96 | tf-device | Ubuntu 22.04 LTS | active | 2023-03-17T11:21:12Z |\n+--------------------------------------+-----------+------------------+--------+----------------------+\n</code></pre>"},{"location":"parts/apply-plan/#4-ssh-into-the-server","title":"4. SSH into the server","text":"<p>Now you can SSH login into the server:</p> Bash<pre><code>ssh -i ~/.ssh/equinix-metal-terraform-rsa root@$(terraform output device_public_ip)\n</code></pre>"},{"location":"parts/apply-plan/#discussion","title":"Discussion","text":"<p>Before proceeding to the next part let's take a few minutes to discuss what we did. Here are some questions to start the discussion.</p> <ul> <li>How does Terraform keep track of my infrastructure changes?</li> <li>Can I scale up or replicate my device to another location without duplicating code?</li> </ul>"},{"location":"parts/conclusion/","title":"Conclusion","text":"<p>Thank you for participating in the workshop! Let's recap some of the key takeways that we've learned:</p> <ul> <li>How to structure a terraform project for successful Day-2 operations</li> <li>Deploy an Equinix Metal device with terraform</li> <li>Using tfvars to keep secrets out of the configuration and make the configuration reusable</li> </ul>"},{"location":"parts/conclusion/#next-steps","title":"Next Steps","text":"<ul> <li>Convert this project to a reusable Terraform Module.</li> <li>Learn how to use Terraform to manage Equinix Fabric and Network Edge resources by trying out the available examples.</li> </ul>"},{"location":"parts/conclusion/#resources","title":"Resources","text":"<p>Here are a few other resources to look at to continue your Equinix Metal journey:</p> <ul> <li>Deploy @ Equinix: A one-stop shop for blogs, guides, and plenty of other resources.</li> <li>Equinix Metal Docs: Equinix Metal official documentation.</li> <li>Equinix Metal APIs: Programmatically interact with Equinix Metal</li> <li>Equinix Labs: Provides SDKs and Terraform modultes for Infrastructure as Code tools.</li> <li>Equinix Community: A global community for customers and Equinix users.</li> </ul>"},{"location":"parts/create-project/","title":"Part 2: Create a Terraform project","text":""},{"location":"parts/create-project/#terraform-projects-structure","title":"Terraform Project\u2019s Structure","text":"<p>The module structure in Terraform is quite flexible. However, we do believe that a good structure and naming rules is essential to guarantee its correct maintenance in Day-2 operations.</p> <p>Code in the Terraform language is stored in plain text files with the .tf file extension. You can keep all your code in a single main.tf file with hundreds of lines of code, or split it into multiple well-named files and folders that make sense for your use case (just in case, this is the right choice). Below is an example of a simple project structure:</p> <ul> <li><code>main.tf</code>: Declare all resource and datasource definitions</li> <li><code>outputs.tf</code>: Declare all outputs in this file. Output values are similar to return values in programming languages</li> <li><code>variables.tf</code>: Declare all input variables in this file. Input variables let you customize aspects of Terraform modules without altering the module's own source code</li> <li><code>terraform.tfvars</code>: Assign/override values of the variables defined in the <code>variables.tf</code> file</li> </ul>"},{"location":"parts/create-project/#steps","title":"Steps","text":""},{"location":"parts/create-project/#1-import-the-provider","title":"1. Import the provider","text":"<p>Each Terraform module must declare which providers it requires, so that Terraform can install and use them. Provider requirements are declared in a <code>required_providers</code> block. You can also specify a version constraint for compability restrictions.</p> <p>Some providers require additional settings (i.e.: credentials, a default project, a region, etc) before Terraform can use them.</p> <p>Create a <code>main.tf</code> file to configure the provider. Insert the code below and keep the <code>auth_token</code> as is, we will update it later in this workshop.</p> Terraform<pre><code>terraform {\n  required_providers {\n    equinix = {\n      source = \"equinix/equinix\"\n    }\n  }\n}\n\n# Credentials for Equinix Metal resources\nprovider \"equinix\" {\n  auth_token = \"someEquinixMetalToken\"\n\n  ## client_id and client_secret can be omitted when the only\n  ## Equinix service consumed are Equinix Metal resources\n  # client_id     = \"someEquinixAPIClientID\"\n  # client_secret = \"someEquinixAPIClientSecret\"\n}\n</code></pre>"},{"location":"parts/create-project/#2-specify-resources-youll-use","title":"2. Specify resources you'll use","text":"<p>Define a new metal project and set your organization ID.</p> Terraform<pre><code>resource \"equinix_metal_project\" \"project\" {\n  name = \"Terraform Workshop\"\n  organization_id = \"someEquinixMetalOrgId\"\n}\n</code></pre> <p>Add a new Equinix Metal device (baremetal server) with an implicit dependency in <code>project_id</code>.</p> Terraform<pre><code>resource \"equinix_metal_device\" \"device\" {\n  hostname         = \"tf-device\"\n  plan             = \"c3.small.x86\"\n  metro            = \"sv\"\n  operating_system = \"ubuntu_20_04\"\n  billing_cycle    = \"hourly\"\n  project_id       = equinix_metal_project.project.id\n}\n</code></pre> <p>Add a new Equinix Metal project SSH key. Insert the code below and keep it as-is, we will update it later in this workshop.</p> Terraform<pre><code>resource \"equinix_metal_project_ssh_key\" \"public_key\" {\n  name       = \"terraform-rsa\"\n  public_key = \"someRsaSshKeyContent\"\n  project_id = equinix_metal_project.project.id\n}\n</code></pre> <p>Use the Terraform <code>TLS</code> provider to create an OpenSSH formatted private key.</p> Terraform<pre><code>resource \"tls_private_key\" \"ssh_key_pair\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n</code></pre> <p>Pro Tip: unless you need a specific provider version, none of the official hashicorp providers need to be added to the <code>terraform.required_providers</code> block.</p> <p>Use terraform <code>local</code> provider to store the private key.</p> Terraform<pre><code>resource \"local_file\" \"private_key\" {\n  content         = chomp(tls_private_key.ssh_key_pair.private_key_pem)\n  filename        = pathexpand(format(\"~/.ssh/%s\", \"equinix-metal-terraform-rsa\"))\n  file_permission = \"0600\"\n}\n</code></pre> <p>Update <code>equinix_metal_project_ssh_key.public_key</code> to reference the public key.</p> Terraform<pre><code>resource \"equinix_metal_project_ssh_key\" \"public_key\" {\n  ...\n  public_key = chomp(tls_private_key.ssh_key_pair.public_key_openssh)\n}\n</code></pre> <p>Pro Tip: you can use <code>depends_on</code> meta-argument to declare explicit dependencies between resources.</p> <p>If you create a new device in a project, all the keys of the project's collaborators will be injected to the device. Add <code>depends_on</code> in the device resource to make sure the key is created before the device.</p> Terraform<pre><code>resource \"equinix_metal_device\" \"device\" {\n  ...\n  depends_on = [ equinix_metal_project_ssh_key.public_key ]\n}\n</code></pre>"},{"location":"parts/create-project/#3-create-an-outputs-file","title":"3. Create an Outputs file","text":"<p>Create an <code>outputs.tf</code> file to expose some computed attributes that you will need later.</p> Terraform<pre><code>output \"project_id\" {\n  value = equinix_metal_project.project.id\n}\n\noutput \"device_id\" {\n  value = equinix_metal_device.device.id\n}\n\noutput \"device_public_ip\" {\n  value = equinix_metal_device.device.access_public_ipv4\n} \n</code></pre>"},{"location":"parts/create-project/#4-create-a-variables-file","title":"4. Create a Variables file","text":"<p>Create a <code>variables.tf</code> file to more easily define inputs.</p> Terraform<pre><code>variable \"plan\" {\n  type        = string\n  description = \"device type/size\"\n  default     = \"c3.small.x86\"\n}\n\nvariable \"metro\" {\n  type        = string\n  description = \"Equinix metro code\"\n  default     = \"SV\"\n}\n\nvariable \"os\" {\n  type        = string\n  description = \"Operating system\"\n  default     = \"ubuntu_20_04\"\n}\n</code></pre> <p>Update <code>main.tf</code> to start using these new variables.</p> Terraform<pre><code>resource \"equinix_metal_device\" \"device\" {\n  hostname         = \"tf-device\"\n  plan             = var.plan\n  metro            = var.metro\n  operating_system = var.os\n  billing_cycle    = \"hourly\"\n  project_id       = equinix_metal_project.project.id\n  depends_on       = [\"equinix_metal_project_ssh_key.public_key\"]\n}\n</code></pre>"},{"location":"parts/create-project/#5-create-a-tfvars-files","title":"5. Create a Tfvars files","text":"<p>Default variable values can be overridden on the command line. In fact, a default value is not even required, Terraform will prompt for an input for the variables with no default value.</p> <p>To set lots of variables, it is more convenient to specify their values in a variable definitions file <code>.tfvars</code>.</p> <p>Create a <code>terraform.tfvars</code> file and add key/value inputs for the variables.</p> INI<pre><code>plan  = \"c3.medium.x86\"\nmetro = \"fr\"\nos    = \"ubuntu_22_04\"\n</code></pre> <p>Pro Tip: you can have multiple <code>.tfvars</code> to reuse your code in different projects/locations/environments, such as <code>dev.tfvars</code>, <code>staging.tfvars</code>, <code>web_frontend.tfvars</code>, <code>web_backend.tfvars</code>, etc. You will be able to specify which one you want to use when creating the infrastructure</p>"},{"location":"parts/create-project/#6-leverage-environment-variables","title":"6. Leverage environment variables","text":"<p>It is not a good practice to include your credentials directly in your template. Although there are more secure options, a good first practice is to use environment variables instead. Before using a new provider, checkout its documentation for more details on the available authentication methods.</p> <p>To configure Equinix Metal credentials, you will need to add the <code>METAL_AUTH_TOKEN</code> variable.</p> Bash<pre><code>export METAL_AUTH_TOKEN=someEquinixMetalToken\n</code></pre> <p>Pro Tip: You can use metal-cli to add the required credentials without printing them on your screen</p> <p>In Bash:</p> Bash<pre><code>eval $(metal env)\n</code></pre> <p>Use <code>--help</code> for other shells examples:</p> Bash<pre><code>metal env --help\n</code></pre> <p>Now, you can delete the <code>auth_token = \"someEquinixMetalAPIToken\"</code> line we kept in <code>main.tf</code> file</p> <p>Just one last Tip, any variable you set on your .tf templates (<code>plan</code>, <code>metro</code> and <code>os</code> in this workshop) can be set as a environment variable in the format <code>TF_VAR_name</code> and this will be checked last for a value. For example:</p> Bash<pre><code>export TF_VAR_plan=\"c3.medium.x86\"\nexport TF_VAR_metro=\"fr\"\nexport TF_VAR_os=\"ubuntu_22_04\"\n</code></pre> <p>Check out the <code>metal</code> CLI for some useful variables you can take advantage of in your projects:</p> Bash<pre><code>metal env --output terraform\n</code></pre>"},{"location":"parts/create-project/#7-verify-the-project-structure","title":"7. Verify the project structure","text":"<p>At this point, your project should look like this:</p> Bash<pre><code>tree\n.\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 outputs.tf\n\u251c\u2500\u2500 terraform.tfvars\n\u2514\u2500\u2500 variables.tf\n\n1 directory, 4 files\n</code></pre> <p>And the <code>main.tf</code> file should look like this:</p> <p></p>"},{"location":"parts/create-project/#discussion","title":"Discussion","text":"<p>Before proceeding to the next part let's take a few minutes to discuss what we did. Here are some questions to start the discussion.</p> <ul> <li>Can other providers be used in the same template/project?</li> <li>Are all the Equinix platform resources available on Terraform?</li> </ul>"},{"location":"parts/install/","title":"Part 1: Account Setup and Terraform Install","text":"<p>To run this workshop you will need access to an Equinix Metal Account or create a new one following step 1 below.</p> <p>Note:  You are responsible for the cost of resources created in your Equinix Metal account while running this workshop.</p>"},{"location":"parts/install/#steps","title":"Steps","text":""},{"location":"parts/install/#1-create-an-equinix-metal-account","title":"1. Create an Equinix Metal account","text":"<p>If you have never used Equinix Metal before, don't worry, you just need 2 minutes to sign-up and create your first organization. If you have any doubt you can watch our Getting Started with Equinix Metal video.</p>"},{"location":"parts/install/#2-create-an-api-key","title":"2. Create an API key","text":"<p>API keys in Metal can be tied to your user or to a single project. For this workshop we will need a user-level API key.</p> <p>Note: Project API keys do not have access to the entirety of the API; some endpoints can only be used by personal API keys.</p> <p>To create a new user API key, access your user Profile in the Equinix Metal console, click on the User Icon, and click My Profile.</p> <p></p> <ul> <li>Select the <code>API Keys</code> tab.</li> <li>Click on <code>+ Add New Key</code>.</li> <li>Create a new key with <code>Read/Write</code> permissions.</li> </ul> <p></p>"},{"location":"parts/install/#3-install-terraform","title":"3. Install Terraform","text":"<p>All you need to start working with Terraform is to download a binary file. However, it is also possible to use a package manager for your given operating system.</p> <p>We will not describe how to install Terraform, instead refer to the Terraform documentation.</p>"},{"location":"parts/install/#4-optional-install-and-configure-metal-cli","title":"4. (Optional) Install and Configure Metal CLI","text":"<p>Once you are familiar with the console you may feel more comfortable managing your Equinix Metal resources with the command-line interface tool Metal-cli.</p> <p>As with Terraform, you only need to download a binary to start enjoying Metal-cli, but you may want to check out the different installation options.</p> <p>Once installed you need to configure your credentials. To do this, execute <code>metal init</code> and provide the requested information.</p> <p>Expected output:</p> Bash<pre><code>$ metal init\n\nEquinix Metal API Tokens can be obtained through the portal at https://console.equinix.com/.\nSee https://metal.equinix.com/developers/docs/accounts/users/ for more details.\n\nToken (hidden): \nOrganization ID [27703148-e7bf-4a2f-95cf-46e7dddb4bb8]: \nProject ID []: \n\nWriting /Users/Oscar.Cobles/.config/equinix/metal.yaml\n</code></pre>"},{"location":"parts/install/#3-verify","title":"3. Verify","text":"Bash<pre><code>$ terraform version\n\nTerraform v1.4.2\non darwin_amd64\n</code></pre> Bash<pre><code>$ metal organization get\n\n+--------------------------------------+-------------------------------------+----------------------+\n|                  ID                  |                NAME                 |       CREATED        |\n+--------------------------------------+-------------------------------------+----------------------+\n| 27703148-e7bf-4a2f-95cf-46e7dddb4bb8 | Equinix Terraform                   | 2023-01-01T00:00:00Z |\n+--------------------------------------+-------------------------------------+----------------------+\n</code></pre>"},{"location":"parts/install/#discussion","title":"Discussion","text":"<p>Before proceeding to the next part let's take a few minutes to discuss what we did. Here are some questions to start the discussion.</p> <ul> <li>Can we create API keys without manually using the portal?</li> <li>I really don't have many resources deployed on Equinix Metal, why should I use Terraform?</li> </ul>"}]}